package com.albertsons.cartservice.services.implementation;

import com.albertsons.cartservice.persistence.CartRepo;
import com.albertsons.cartservice.resources.constants.CartConstants;
import com.albertsons.cartservice.resources.model.AddItemResponse;
import com.albertsons.cartservice.resources.model.Cart;
import com.albertsons.cartservice.resources.model.Item;
import com.albertsons.cartservice.resources.model.ItemInfo;
import com.albertsons.cartservice.services.interfaces.CartService;
import com.albertsons.cartservice.validation.CartServiceValidation;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Optional;
import java.util.stream.Collectors;

@Slf4j
@Service
public class CartServiceImpl implements CartService {

    @Autowired
    RestTemplate restTemplate;

    @Autowired
    private CartRepo cartRepo;

    @Autowired
    private CartServiceValidation cartServiceValidation;

    @Override
    public AddItemResponse addItemToCart(String storeId, String guid, String app, ItemInfo itemInfo) {

        log.debug("Requested item details to add into the cart " + itemInfo);
        AddItemResponse addItemResponse = null;
        addItemResponse = cartServiceValidation.validateAddItemRequest(storeId, guid, app, itemInfo);
        if (addItemResponse == null) {
            try {
                Optional<Cart> cart = cartRepo.findByGuidAndStoreId(guid, storeId);
                Item existingItem = isItemExist(itemInfo, cart);
                if (existingItem == null) {
                    Optional<Cart> cartOne = cartRepo.findByGuidAndStoreId(guid, storeId);
                    if (!cartOne.isPresent()) {
                        return createNewCart(storeId, guid, app, itemInfo);
                    } else {
                        return addItemToExistingCart(storeId, app, itemInfo, cartOne.get());
                    }
                } else {
                    return updateExistingItemInCart(itemInfo, cart.get());
                }
            } catch (Exception e) {
                return dbQueryErrorResponse();
            }
        }
        return addItemResponse;
    }

    public AddItemResponse updateExistingItemInCart(ItemInfo itemInfo, Cart cartToUpdate) {

        ArrayList<Item> itemsList = cartToUpdate.getItems();
        if (itemInfo.getQuantity() > CartConstants.ITEM_LIMIT && !itemInfo.isBag_item()) {
            return itemLimitError();
        }
        for (Item indexItem : itemsList) {
            if (indexItem.getItem_id().equals(itemInfo.getItem_id())) {
                Item itemtoUpdate = prepareNewItem(itemInfo);
                itemsList.set(itemsList.indexOf(indexItem), itemtoUpdate);
            }
        }
        cartToUpdate.setItems(itemsList);
        cartToUpdate.setTime_stamp((double) new Date().getTime());
        try {
            Cart updatedCart = cartRepo.save(cartToUpdate);
            log.debug("Item updated to the cart successfully : " + updatedCart);
            return itemUpdatedSuccessfully();
        } catch (Exception e) {
            return dbQueryErrorResponse();
        }
    }

    public AddItemResponse addItemToExistingCart(String storeId, String app, ItemInfo itemInfo, Cart cartToAdd) {
        AddItemResponse addItemResponse = null;
        ArrayList<Item> items = cartToAdd.getItems();
        int cartCount = items.stream().filter(i -> i.getBag_item().equals(true)).collect(Collectors.toList()).size();
        if (cartCount == 0) {
            if (!app.equals("3pl") && !getStoreHours(storeId)) {
                return new AddItemResponse(CartConstants.ACK_ONE, CartConstants.ERROR_CODE,
                        CartConstants.MESSAGE_OUT_OF_OPERATION, CartConstants.OUT_OF_OPERATION_ERROR,
                        CartConstants.BACKEND_ERROR);
            }
        }
        if ((cartCount >= CartConstants.CART_LIMIT || itemInfo.getQuantity() > CartConstants.ITEM_LIMIT)
                && !itemInfo.isBag_item()) {
            return itemLimitError();
        } else {
            Item item = prepareNewItem(itemInfo);
            item.setAdded_time_stamp((double) new Date().getTime());
            items.add(item);
            cartToAdd.setItems(items);
            cartToAdd.setTime_stamp((double) new Date().getTime());
            try {
                Cart currentCart = cartRepo.save(cartToAdd);
                log.debug("Item added to the cart successfully : " + currentCart);
                return itemAddedSuccessfully();
            } catch (Exception e) {
                log.debug("Exception occured while saving cart with new item " + e.getLocalizedMessage());
                return dbQueryErrorResponse();
            }
        }
    }

    public AddItemResponse itemLimitError() {
        return new AddItemResponse(CartConstants.ACK_ONE, CartConstants.ERROR_CODE,
                CartConstants.MESSAGE_ITEM_CART_ERROR, CartConstants.MAX_ITEM_ERROR, CartConstants.BACKEND_ERROR);
    }

    public AddItemResponse itemAddedSuccessfully() {
        return new AddItemResponse(CartConstants.ACK_ZERO, CartConstants.SUCCSEEFULLY_ADDED_CODE,
                CartConstants.MESSAGE_ITEM_ADDED_SUCCESSFULLY, "", "");
    }

    public AddItemResponse itemCreatedSuccessfully() {
        return new AddItemResponse(CartConstants.ACK_ZERO, CartConstants.SUCCSEEFULLY_ADDED_CODE,
                CartConstants.MESSAGE_ITEM_CREATED_SUCCESSFULLY, "", "");
    }

    public AddItemResponse itemUpdatedSuccessfully() {
        return new AddItemResponse(CartConstants.ACK_ZERO, CartConstants.SUCCSEEFULLY_ADDED_CODE,
                CartConstants.MESSAGE_ITEM_UPDATED_SUCCESSFULLY, "", "");
    }

    public Cart createNewCartData(String guid, String storeId, Item item) {
        item.setAdded_time_stamp((double) new Date().getTime());
        Cart newCart = new Cart();
        newCart.setGuid(guid);
        newCart.setStore_id(storeId);
        newCart.setTime_stamp((double) new Date().getTime());
        ArrayList<Item> items = new ArrayList<Item>();
        items.add(item);
        newCart.setItems(items);
        return newCart;
    }

    public AddItemResponse dbQueryErrorResponse() {
        return new AddItemResponse(CartConstants.ACK_ONE, CartConstants.ERROR_CODE, CartConstants.MESSAGE_GENERIC1,
                CartConstants.DB_ERROR, CartConstants.BACKEND_ERROR);
    }

    public boolean getStoreHours(String storeId) {
        boolean sngStoreHours = true;
        URI uri;
        try {
            uri = new URI(CartConstants.RETAIL_BASE_URL + CartConstants.CHECK_STORE_HR + Integer.parseInt(storeId, 10));
            HttpHeaders headers = new HttpHeaders();
            headers.set("Ocp-Apim-Subscription-Key", CartConstants.RETAIL_OPERATIONS_SUBSCRIPTION_KEY);
            HttpEntity<?> entity = new HttpEntity<>(headers);
            String response = restTemplate.exchange(uri, HttpMethod.GET, entity, String.class).getBody();
            JSONParser parser = new JSONParser();
            JSONObject jobj = (JSONObject) parser.parse(response);
            JSONObject dataObj = (JSONObject) parser.parse(jobj.get("data").toString());
            return (boolean) dataObj.get("sngStoreHours");
        } catch (NumberFormatException | URISyntaxException | ParseException e) {
            return sngStoreHours;
        }
    }

    public Item prepareNewItem(ItemInfo itemInfo) {
        Item newItem = new Item();
        newItem.setItem_id(itemInfo.getItem_id());
        newItem.setUpc_type(itemInfo.getUpc_type().toLowerCase());
        newItem.setStatus(CartConstants.ACTIVE);
        newItem.setLast_updated_time_stamp((double) new Date().getTime());
        newItem.setBag_item(getBagItem(itemInfo));
        newItem.setScan_code(itemInfo.getScan_code());
        newItem.setUpc_type(itemInfo.getUpc_type());
        newItem.setQuantity(itemInfo.getQuantity());
        newItem.setPromoOfferPrice(itemInfo.getPromoOfferPrice());
        if (itemInfo.getClubPrice() != null) {
            newItem.setClubPrice(itemInfo.getClubPrice());
        }
        if (itemInfo.getJfuOffers() != null) {
            newItem.setJfuOffers(itemInfo.getJfuOffers());
        }
        if (itemInfo.getJfuOfferCount() != null ) {
            newItem.setJfuOfferCount(itemInfo.getJfuOfferCount());
        }
        return newItem;
    }

    public boolean getBagItem(ItemInfo itemInfo) {
        if (itemInfo.getUpc_type().equalsIgnoreCase("PLU")
                && Optional.ofNullable(itemInfo.getWeight()).orElse(0) != 0) {
            itemInfo.setQuantity(0);
            return true;
        } else {
            return false;
        }
    }

    public Item isItemExist(ItemInfo itemInfo, Optional<Cart> cart) {
        Item existingItem = null;
        if (cart.isPresent()) {
            Cart existingCart = cart.get();
            ArrayList<Item> itemsList = existingCart.getItems();
            for (Item cartItem : itemsList) {
                System.out.println(cartItem.getItem_id());
                System.out.println(itemInfo.getItem_id());
                if (cartItem.getItem_id().equals(itemInfo.getItem_id()) && cartItem.getStatus().equalsIgnoreCase("active")) {
                    existingItem = cartItem;
                }
            }
        }
        return existingItem;
    }

    public AddItemResponse createNewCart(String storeId, String guid, String app, ItemInfo itemInfo) {

        AddItemResponse addItemResponse = checkAppAndStore(app, storeId, itemInfo);
        if (addItemResponse == null) {
            Item item = prepareNewItem(itemInfo);
            Cart newCart = createNewCartData(guid, storeId, item);
            Cart instertedCart = cartRepo.insert(newCart);
            log.debug("New cart created with the items:" + instertedCart);
            return itemCreatedSuccessfully();
        }
        return addItemResponse;
    }

    public AddItemResponse checkAppAndStore(String app, String storeId, ItemInfo itemInfo) {
//        boolean isOpenHour = true;
        boolean isOpenHour = getStoreHours(storeId);
        if (!app.equals("3pl") && !isOpenHour) {
            return new AddItemResponse(CartConstants.ACK_ONE, CartConstants.ERROR_CODE,
                    CartConstants.MESSAGE_OUT_OF_OPERATION, CartConstants.OUT_OF_OPERATION_ERROR,
                    CartConstants.BACKEND_ERROR);
        } else if (itemInfo.getQuantity() > CartConstants.ITEM_LIMIT) {
            return new AddItemResponse(CartConstants.ACK_ONE, CartConstants.ERROR_CODE,
                    CartConstants.MESSAGE_ITEM_CART_ERROR, CartConstants.MAX_ITEM_ERROR, CartConstants.BACKEND_ERROR);
        }
        return null;
    }
}